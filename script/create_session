#!/usr/bin/env python
# -- BEGIN LICENSE BLOCK ----------------------------------------------

# catmux
# Copyright (C) 2018  Felix Mauch
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -- END LICENSE BLOCK ------------------------------------------------

from __future__ import print_function
import os
import subprocess
import sys

from ament_index_python.packages import get_package_share_directory

import argparse

from catmux.session import Session as CatmuxSession


def safe_call(cmd_list):
    """Makes a subprocess check_call and outputs a clear error message on failure and then exits"""
    try:
        subprocess.check_output(cmd_list)
        return True
    except subprocess.CalledProcessError as err_thrown:
        print('Error while calling "%s"', err_thrown.cmd)
        return False


def parse_arguments(debug=False):
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Create a new catmux session')
    parser.add_argument('session_config',
                        help="Session configuration. Should be a yaml-file.")
    parser.add_argument('-n', '--session_name', default='catmux',
                        help="Name used for the tmux session")
    parser.add_argument('-t', '--tmux_config',
                        help="This config will be used for the tmux session")
    parser.add_argument('-d', '--detach', action='store_true',
                        help="Start session in detached mode")
    parser.add_argument('--overwrite',
                        help="Overwrite a parameter from the session config. Parameters can be "
                             "specified using a comma-separated list such as '--overwrite "
                             "param_a=1,param_b=2'.")

    args = parser.parse_args()
    if debug:
        print(args)
    return args


def resolve_path(path_string):
    """Resolves a package:// path string"""
    if path_string.find('package://') >= 0:
        relevant_path = path_string.split('://')[1]
        split_path = relevant_path.split('/', 1)
        try:
            package_share_directory = get_package_share_directory(split_path[0])
            print('Found package share directory of package "{0}" at {1}'.format(split_path[0], package_share_directory))
        except:
            print('ERROR: Package with name "{}" could not be found'.
                  format(split_path[0]))
            sys.exit(1)
        path_string = os.path.join(package_share_directory, split_path[1])
    return path_string

def main():
    """Creates a new tmux session if it does not yet exist"""
    args = parse_arguments()


    session_config = CatmuxSession(args.session_name, args.overwrite)
    session_config.init_from_filepath(resolve_path(args.session_config))

    try:
        subprocess.check_call(['tmux', 'has-session', '-t', args.session_name])
        print('Session with name "{}" already exists. Not overwriting session.'.format(
            args.session_name))
        sys.exit(0)
    except subprocess.CalledProcessError:
        # When has-session returns non-zero exit code, the session already exists or there is
        # probably something severely wrong. TODO: This could be done better probably
        pass

    command = ['tmux']
    if args.tmux_config:
        tmux_path = resolve_path(args.tmux_config)
        print('Using tmux config file: {}'.format(tmux_path))
        command += ['-f', tmux_path]
    command += ['new-session', '-s', args.session_name]
    command.append('-d')
    print(' '.join(command))
    if not safe_call(command):
        sys.exit(1)

    print('Created session "{}"'.format(args.session_name))

    session_config.run()
    if not args.detach:
        safe_call(['tmux', 'attach', '-t', args.session_name])


if __name__ == "__main__":
    main()
